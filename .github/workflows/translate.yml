name: Auto-translate Articles

on:
  push:
    branches: [main]
    paths:
      - 'content/drafts/**/*.md'
  workflow_dispatch:
    inputs:
      target_languages:
        description: 'Target languages (comma-separated or "all")'
        required: false
        default: 'all'
      force_retranslate:
        description: 'Force re-translation even if files exist'
        type: boolean
        default: false

jobs:
  translate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build translate-cli
        run: pnpm build

      - name: Detect changed Japanese files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger - process all Japanese files
            FILES=$(find content/drafts -name "*.md" -not -path "*/en/*" -not -path "*/zh-cn/*" -not -path "*/zh-tw/*" -not -path "*/ko/*" -not -path "*/fr/*" -not -path "*/de/*" -not -path "*/es/*" -not -path "*/it/*" -not -path "*/pt/*" -not -path "*/ru/*" -not -path "*/ar/*" -not -path "*/hi/*" -not -path "*/id/*" -not -path "*/ms/*" -not -path "*/th/*" -not -path "*/vi/*" -not -path "*/tl/*" -not -path "*/tr/*" -not -path "*/br/*" | grep -v -- "-en\.md$\|-(zh-cn|zh-tw|ko|fr|de|es|it|pt|ru|ar|hi|id|ms|th|vi|tl|tr|br)\.md$" || true)
          else
            # Push trigger - only process changed files
            FILES=$(git diff --name-only HEAD^ HEAD | grep "^content/drafts/.*\.md$" | grep -v -- "-en\.md$\|-(zh-cn|zh-tw|ko|fr|de|es|it|pt|ru|ar|hi|id|ms|th|vi|tl|tr|br)\.md$" || true)
          fi
          
          if [ -z "$FILES" ]; then
            echo "No Japanese markdown files to process"
            echo "has_files=false" >> $GITHUB_OUTPUT
          else
            echo "Found files to translate:"
            echo "$FILES"
            echo "has_files=true" >> $GITHUB_OUTPUT
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Filter Japanese files
        if: steps.changed-files.outputs.has_files == 'true'
        id: japanese-files
        run: |
          JAPANESE_FILES=""
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              # Check if file has lang: ja in front matter
              if grep -q "^lang: ja" "$file" || grep -q "^lang: 'ja'" "$file" || grep -q '^lang: "ja"' "$file"; then
                JAPANESE_FILES="$JAPANESE_FILES $file"
              fi
            fi
          done <<< "${{ steps.changed-files.outputs.files }}"
          
          if [ -z "$JAPANESE_FILES" ]; then
            echo "No Japanese files found"
            echo "has_japanese_files=false" >> $GITHUB_OUTPUT
          else
            echo "Japanese files to translate: $JAPANESE_FILES"
            echo "has_japanese_files=true" >> $GITHUB_OUTPUT
            echo "japanese_files=$JAPANESE_FILES" >> $GITHUB_OUTPUT
          fi

      - name: Run translation
        if: steps.japanese-files.outputs.has_japanese_files == 'true'
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
        run: |
          TARGET_LANGS="${{ github.event.inputs.target_languages || 'all' }}"
          FORCE_FLAG=""
          if [ "${{ github.event.inputs.force_retranslate }}" == "true" ]; then
            FORCE_FLAG="--force"
          fi
          
          echo "Translating files with target languages: $TARGET_LANGS"
          pnpm translate ${{ steps.japanese-files.outputs.japanese_files }} --target "$TARGET_LANGS" $FORCE_FLAG --json

      - name: Run markdown lint
        if: steps.japanese-files.outputs.has_japanese_files == 'true'
        run: |
          # Install markdownlint-cli2 if not already installed
          if ! command -v markdownlint-cli2 &> /dev/null; then
            npm install -g markdownlint-cli2
          fi
          
          # Lint translated files
          markdownlint-cli2 "content/drafts/**/*.md" || true

      - name: Dry-run validation
        if: steps.japanese-files.outputs.has_japanese_files == 'true'
        run: |
          # Create a simple validation script for front matter
          cat > validate-frontmatter.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const matter = require('gray-matter');
          const { glob } = require('fast-glob');
          
          async function validateFiles() {
            const files = await glob('content/drafts/**/*-{en,zh-cn,zh-tw,ko,fr,de,es,it,pt,ru,ar,hi,id,ms,th,vi,tl,tr,br}.md');
            let errors = 0;
            
            for (const file of files) {
              try {
                const content = fs.readFileSync(file, 'utf-8');
                const parsed = matter(content);
                
                if (!parsed.data.title) {
                  console.error(`‚ùå Missing title in ${file}`);
                  errors++;
                }
                if (!parsed.data.lang) {
                  console.error(`‚ùå Missing lang in ${file}`);
                  errors++;
                }
                if (!parsed.data.slug) {
                  console.error(`‚ùå Missing slug in ${file}`);
                  errors++;
                }
              } catch (error) {
                console.error(`‚ùå Failed to parse ${file}: ${error.message}`);
                errors++;
              }
            }
            
            if (errors > 0) {
              console.error(`‚ùå Found ${errors} validation errors`);
              process.exit(1);
            } else {
              console.log(`‚úÖ All ${files.length} translated files are valid`);
            }
          }
          
          validateFiles();
          EOF
          
          node validate-frontmatter.js

      - name: Configure Git
        if: steps.japanese-files.outputs.has_japanese_files == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push translations
        if: steps.japanese-files.outputs.has_japanese_files == 'true'
        run: |
          # Add all translated files
          git add content/drafts/**/*.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No translation changes to commit"
          else
            # Get list of translated files for commit message
            TRANSLATED_FILES=$(git diff --staged --name-only | grep -E "-(en|zh-cn|zh-tw|ko|fr|de|es|it|pt|ru|ar|hi|id|ms|th|vi|tl|tr|br)\.md$" | wc -l)
            ORIGINAL_FILES=$(echo "${{ steps.japanese-files.outputs.japanese_files }}" | wc -w)
            
            git commit -m "chore: add translations for ${ORIGINAL_FILES} article(s) (${TRANSLATED_FILES} translations)" \
                       -m "" \
                       -m "ü§ñ Generated with DeepL API" \
                       -m "" \
                       -m "Co-Authored-By: GitHub Actions <action@github.com>"
            
            git push
            
            echo "‚úÖ Successfully committed and pushed ${TRANSLATED_FILES} translations"
          fi