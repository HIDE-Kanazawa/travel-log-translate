name: Smart Translation Workflow

concurrency:
  group: translate-${{ github.event.client_payload.documentId || inputs.documentId || inputs.document_id || github.run_id }}
  cancel-in-progress: true

on:
  repository_dispatch:
    types: [sanity_article_ja]
  workflow_dispatch:
    inputs:
      documentId:
        description: 'Sanity document ID to translate'
        required: true
        type: string
      force:
        description: 'Force re-translation even if translations exist'
        required: false
        type: boolean
        default: false
      dryRun:
        description: 'Dry run mode'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  translate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: |
          pnpm --filter shared build
          pnpm --filter worker build

      - name: Extract document info
        id: extract-info
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            DOCUMENT_ID="${{ github.event.client_payload.documentId }}"
            TITLE="${{ github.event.client_payload.title }}"
            TRIGGERED_BY="${{ github.event.client_payload.triggeredBy }}"
            HAS_IMAGES="${{ github.event.client_payload.hasImages }}"
          else
            DOCUMENT_ID="${{ inputs.documentId }}"
            TITLE="Manual trigger"
            TRIGGERED_BY="workflow_dispatch"
            HAS_IMAGES="true"
          fi
          
          echo "document-id=$DOCUMENT_ID" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "triggered-by=$TRIGGERED_BY" >> $GITHUB_OUTPUT
          echo "has-images=$HAS_IMAGES" >> $GITHUB_OUTPUT

      - name: Assert Sanity project/dataset
        env:
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
        run: |
          set -euo pipefail
          echo "üîí Asserting Sanity target matches expected..."
          echo "Project=${SANITY_PROJECT_ID} Dataset=${SANITY_DATASET}"
          if [ "${SANITY_PROJECT_ID}" != "fcz6on8p" ] || [ "${SANITY_DATASET}" != "production" ]; then
            echo "‚ùå Mismatch: expected project=fcz6on8p,dataset=production but got project=${SANITY_PROJECT_ID},dataset=${SANITY_DATASET}"
            exit 2
          fi
          echo "‚úÖ Sanity target verified: ${SANITY_PROJECT_ID}/${SANITY_DATASET}"

      - name: Pre-translation diagnostics (stats JSON)
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
          SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
          SANITY_API_VERSION: ${{ secrets.SANITY_API_VERSION }}
        run: |
          set -euo pipefail
          echo "üîç Running sanity-translate stats (pre) for ${{ steps.extract-info.outputs.document-id }}"
          # ensure latest build is used and emit pure JSON only
          pnpm --filter worker run build
          node packages/worker/dist/index.js stats "${{ steps.extract-info.outputs.document-id }}" --json > pre-stats.json 2> pre-stats.err || true
          echo "üì¶ pre-stats (first 120 lines):" && sed -n '1,120p' pre-stats.json || true

      - name: Run translation
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
          SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
          SANITY_API_VERSION: ${{ secrets.SANITY_API_VERSION }}
        run: |
          if [ "${{ inputs.dryRun }}" = "true" ]; then
            echo "üîç Dry run mode - checking translation conditions"
            pnpm --filter worker run build
            node packages/worker/dist/index.js "${{ steps.extract-info.outputs.document-id }}" --dry-run
          else
            echo "üöÄ Starting translation for document: ${{ steps.extract-info.outputs.document-id }}"
            FORCE_ARG=""
            if [ "${{ inputs.force }}" = "true" ]; then
              FORCE_ARG="--force"
            fi
            pnpm --filter worker run build
            node packages/worker/dist/index.js "${{ steps.extract-info.outputs.document-id }}" $FORCE_ARG
          fi

      - name: Post-translation diagnostics (stats JSON)
        if: always()
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
          SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
          SANITY_API_VERSION: ${{ secrets.SANITY_API_VERSION }}
        run: |
          set -euo pipefail
          echo "üîç Running sanity-translate stats (post) for ${{ steps.extract-info.outputs.document-id }}"
          pnpm --filter worker run build
          node packages/worker/dist/index.js stats "${{ steps.extract-info.outputs.document-id }}" --json > post-stats.json 2> post-stats.err || true
          if ! jq -e . post-stats.json > /dev/null 2>&1; then
            echo "‚ö†Ô∏è post-stats.json is not valid JSON. Attempting salvage..."
            awk 'BEGIN{p=0} /^\{/ {p=1} p{print}' post-stats.json > post-stats.fixed.json || true
            if jq -e . post-stats.fixed.json > /dev/null 2>&1; then
              mv post-stats.fixed.json post-stats.json
              echo "‚úÖ Salvaged valid JSON for post stats"
            else
              echo "‚ùå Could not parse post-stats.json; showing raw logs"
              sed -n '1,120p' post-stats.json || true
              sed -n '1,120p' post-stats.err || true
            fi
          fi
          echo "üì¶ post-stats (first 120 lines):" && sed -n '1,120p' post-stats.json || true
          echo "üîé pt-br exists:" $(jq -r 'try .translationStatus[] | select(.language=="pt-br") | .exists | tostring' post-stats.json | tail -n 1)

      - name: Commit translated files
        if: ${{ inputs.dryRun != true }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add any new translation files
          git add -A

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No translation files to commit"
          else
            git commit \
              -m "chore: add translations for ${{ steps.extract-info.outputs.title }}" \
              -m "Triggered by: ${{ steps.extract-info.outputs.triggered-by }}" \
              -m "Document ID: ${{ steps.extract-info.outputs.document-id }}" \
              -m "Has images: ${{ steps.extract-info.outputs.has-images }}" \
              -m "Co-Authored-By: Claude <noreply@anthropic.com>"

            git push
            echo "‚úÖ Translations committed and pushed"
          fi

      - name: Summary
        run: |
          echo "## Translation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Document ID**: ${{ steps.extract-info.outputs.document-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ steps.extract-info.outputs.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ steps.extract-info.outputs.triggered-by }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Has images**: ${{ steps.extract-info.outputs.has-images }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry run**: ${{ inputs.dryRun }}" >> $GITHUB_STEP_SUMMARY